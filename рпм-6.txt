–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º –∫–æ–¥ –ø–æ —á–∞—Å—Ç—è–º, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ–Ω –¥–µ–ª–∞–µ—Ç –∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–µ –∏ –≥–ª—É–±–æ–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ.

üîπ 1. –ö–ª–∞—Å—Å Employee
csharp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
public class Employee
{
    public string Name { get; set; }
    public int Age { get; set; }

    public Employee(string name, int age)
    {
        Name = name;
        Age = age;
    }

    public Employee DeepCopy()
    {
        return new Employee(Name, Age);
    }

    public override string ToString()
    {
        return $"{Name}, {Age} –ª–µ—Ç";
    }
}
–ß—Ç–æ –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:
Employee ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –∏–º–µ–Ω–µ–º –∏ –≤–æ–∑—Ä–∞—Å—Ç–æ–º.

–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Employee(string name, int age) –∑–∞–¥–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏.

–ú–µ—Ç–æ–¥ DeepCopy() —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ ‚Äî —ç—Ç–æ –≥–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è.

–ú–µ—Ç–æ–¥ ToString() ‚Äî –Ω—É–∂–µ–Ω –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ.

üîπ 2. –ö–ª–∞—Å—Å Company
csharp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
public class Company
{
    public Employee[] Employees { get; set; }

    public Company(Employee[] employees)
    {
        Employees = employees;
    }

    public Company ShallowCopy()
    {
        return new Company(this.Employees);
    }

    public Company DeepCopy()
    {
        Employee[] newEmployees = new Employee[Employees.Length];
        for (int i = 0; i < Employees.Length; i++)
        {
            newEmployees[i] = Employees[i].DeepCopy();
        }
        return new Company(newEmployees);
    }

    public void PrintEmployees()
    {
        for (int i = 0; i < Employees.Length; i++)
        {
            Console.WriteLine($"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {i + 1}: {Employees[i]}");
        }
    }
}
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
–ö–ª–∞—Å—Å Company —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (Employee[] Employees).

–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç—Ç–æ—Ç –º–∞—Å—Å–∏–≤.

ShallowCopy() (–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è –∫–æ–ø–∏—è): –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Å—Å–∏–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –û—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –º–∞—Å—Å–∏–≤.

DeepCopy() (–≥–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è): —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ.

PrintEmployees() –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å.

üîπ 3. –ú–µ—Ç–æ–¥ Main (–æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã)
csharp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
var originalCompany = new Company(new Employee[]
{
    new Employee("–ò–≤–∞–Ω", 30),
    new Employee("–û–ª—å–≥–∞", 28)
});
–°–æ–∑–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é —Å –¥–≤—É–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.

csharp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
var shallowCopy = originalCompany.ShallowCopy();
shallowCopy.Employees[0].Name = "–ü–µ—Ç—Ä";
–°–æ–∑–¥–∞–µ–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—É—é –∫–æ–ø–∏—é.

–ú–µ–Ω—è–µ–º –∏–º—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.

–ü–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è –∫–æ–ø–∏—è, –æ—Ä–∏–≥–∏–Ω–∞–ª —Ç–æ–∂–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è (–æ–±–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –æ–±—ä–µ–∫—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤).

csharp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
var deepCopy = originalCompany.DeepCopy();
deepCopy.Employees[0].Name = "–ê–ª–µ–∫—Å–µ–π";
–°–æ–∑–¥–∞–µ–º –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é.

–ú–µ–Ω—è–µ–º –∏–º—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.

–û—Ä–∏–≥–∏–Ω–∞–ª –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–æ–ø–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.

